--- cli.1-unpatched	2018-05-16 16:25:08.065436544 -0400
+++ cli.1	2018-05-16 16:25:07.793438392 -0400
@@ -67,36 +67,36 @@
 assembly to native code.  The generated code is stored in a file with
 the extension .so.  This file will be automatically picked up by the
 runtime when the assembly is executed.  
-.Sp 
+.sp 
 Ahead-of-Time compilation is most useful if you use it in combination
 with the -O=all,-shared flag which enables all of the optimizations in
 the code generator to be performed.  Some of those optimizations are
 not practical for Just-in-Time compilation since they might be very
 time consuming.
-.Sp
+.sp
 Unlike the .NET Framework, Ahead-of-Time compilation will not generate
 domain independent code: it generates the same code that the
 Just-in-Time compiler would produce.   Since most applications use a
 single domain, this is fine.   If you want to optimize the generated
 code for use in multi-domain applications, consider using the
 -O=shared flag.
-.Sp
+.sp
 This pre-compiles the methods, but the original assembly is still
 required to execute as this one contains the metadata and exception
 information which is not available on the generated file.  When
 precompiling code, you might want to compile with all optimizations
 (-O=all).  Pre-compiled code is position independent code.
-.Sp
+.sp
 Pre compilation is just a mechanism to reduce startup time, increase
 code sharing across multiple mono processes and avoid just-in-time
 compilation program startup costs.  The original assembly must still
 be present, as the metadata is contained there.
-.Sp
+.sp
 AOT code typically can not be moved from one computer to another
 (CPU-specific optimizations that are detected at runtime) so you
 should not try to move the pre-generated assemblies or package the
 pre-generated assemblies for deployment.    
-.Sp
+.sp
 A few options are available as a parameter to the 
 .B --aot 
 command line option.   The options are separated by commas, and more
@@ -114,7 +114,7 @@
 object file.
 .TP
 .I bind-to-runtime-version
-.Sp
+.sp
 If specified, forces the generated AOT files to be bound to the
 runtime version of the compiling Mono.   This will prevent the AOT
 files from being consumed by a different Mono runtime.
@@ -319,7 +319,7 @@
 generate any code at runtime and depend exclusively on the code
 generated from using mono --aot=full previously.   This is useful for
 platforms that do not permit dynamic code generation.
-.Sp
+.sp
 Notice that this feature will abort execution at runtime if a codepath
 in your program, or Mono's class libraries attempts to generate code
 dynamically.  You should test your software upfront and make sure that
@@ -388,13 +388,13 @@
              sse2       SSE2 instructions on x86 [arch-dependency]
              tailc      Tail recursion and tail calls
 .fi
-.Sp
+.sp
 For example, to enable all the optimization but dead code
 elimination and inlining, you can use:
 .nf
 	-O=all,-deadce,-inline
 .fi
-.Sp
+.sp
 The flags that are flagged with [arch-dependency] indicate that the
 given option if used in combination with Ahead of Time compilation
 (--aot flag) would produce pre-compiled code that will depend on the
@@ -527,18 +527,18 @@
 \fB--trace[=expression]\fR
 Shows method names as they are invoked.  By default all methods are
 traced. 
-.Sp
+.sp
 The trace can be customized to include or exclude methods, classes or
 assemblies.  A trace expression is a comma separated list of targets,
 each target can be prefixed with a minus sign to turn off a particular
 target.  The words `program', `all' and `disabled' have special
 meaning.  `program' refers to the main program being executed, and
 `all' means all the method calls.
-.Sp
+.sp
 The `disabled' option is used to start up with tracing disabled.  It
 can be enabled at a later point in time in the program by sending the
 SIGUSR2 signal to the runtime.
-.Sp
+.sp
 Assemblies are specified by their name, for example, to trace all
 calls in the System assembly, use:
 .nf
@@ -651,7 +651,7 @@
 the specified method (namespace.name:methodname).  This requires `dot'
 and ghostview to be installed (it expects Ghostview to be called
 "gv"). 
-.Sp
+.sp
 The following graphs are available:
 .nf
           cfg        Control Flow Graph (CFG)
@@ -660,7 +660,7 @@
           ssa        CFG showing code after SSA translation
           optcode    CFG showing code after IR optimizations
 .fi
-.Sp
+.sp
 Some graphs will only be available if certain optimizations are turned
 on.
 .TP
@@ -675,9 +675,9 @@
 .TP
 \fB--wapi=hps|semdel\fR
 Perform maintenance of the process shared data.
-.Sp
+.sp
 semdel will delete the global semaphore.
-.Sp
+.sp
 hps will list the currently used handles.
 .TP
 \fB-v\fR, \fB--verbose\fR
@@ -717,11 +717,11 @@
 If a 
 .I profiler 
 is not specified, the default profiler is used.
-.Sp
+.sp
 The 
 .I profiler_args 
 is a profiler-specific string of options for the profiler itself.
-.Sp
+.sp
 The default profiler accepts the following options 'alloc' to profile
 memory consumption by the application; 'time' to profile the time
 spent on each routine; 'jit' to collect time spent JIT-compiling methods
@@ -731,17 +731,17 @@
 By default the
 profile data is printed to stdout: to change this, use the 'file=filename'
 option to output the data to filename.
-.Sp
+.sp
 For example:
 .nf
 
 	mono --profile program.exe
 
 .fi
-.Sp
+.sp
 That will run the program with the default profiler and will do time
 and allocation profiling.
-.Sp
+.sp
 .nf
 
 	mono --profile=default:stat,alloc,file=prof.out program.exe
@@ -749,7 +749,7 @@
 .fi
 Will do  sample statistical profiling and allocation profiling on
 program.exe. The profile data is put in prof.out.
-.Sp
+.sp
 Note that the statistical profiler has a very low overhead and should
 be the preferred profiler to use (for better output use the full path
 to the mono binary when running and make sure you have installed the
@@ -1056,10 +1056,10 @@
 that process and thread handles are not available to other processes,
 and named mutexes, named events and named semaphores are not visible
 between processes.
-.Sp
+.sp
 This is can also be enabled by default by passing the
 "--disable-shared-handles" option to configure.
-.Sp
+.sp
 This is the default from mono 2.8 onwards.
 .TP
 \fBMONO_DISABLE_SHARED_AREA\fR
@@ -1106,33 +1106,33 @@
 .TP
 \fBMONO_EVENTLOG_TYPE\fR
 Sets the type of event log provider to use (for System.Diagnostics.EventLog).
-.Sp
+.sp
 Possible values are:
 .RS
 .TP
 .I "local[:path]"
-.Sp
+.sp
 Persists event logs and entries to the local file system.
-.Sp
+.sp
 The directory in which to persist the event logs, event sources and entries
 can be specified as part of the value.
-.Sp
+.sp
 If the path is not explicitly set, it defaults to "/var/lib/mono/eventlog"
-on unix and "%APPDATA%\mono\eventlog" on Windows.
+on unix and "%APPDATA%\emono\eeventlog" on Windows.
 .TP
 .I "win32"
-.Sp
+.sp
 .B 
 Uses the native win32 API to write events and registers event logs and
 event sources in the registry.   This is only available on Windows. 
-.Sp
+.sp
 On Unix, the directory permission for individual event log and event source
 directories is set to 777 (with +t bit) allowing everyone to read and write
 event log entries while only allowing entries to be deleted by the user(s)
 that created them.
 .TP
 .I "null"
-.Sp
+.sp
 Silently discards any events.
 .ne
 .PP
@@ -1416,7 +1416,7 @@
 enables all rewriting methods.  (Backslashes are always mapped to
 slashes if this variable is set to a valid option).
 .fi
-.Sp
+.sp
 For example, this would work from the shell:
 .nf
 
@@ -1449,7 +1449,7 @@
 is implemented as a custom profiler module (see the "PROFILING" section) and can be loaded
 in the following way:
 .fi
-.Sp
+.sp
 .nf
 
 	mono --profile=iomap yourapplication.exe
@@ -1519,7 +1519,7 @@
 creating file names in the ".wapi" directory. This helps if the host name of
 your machine is likely to be changed when a mono application is running or if
 you have a .wapi directory shared among several different computers.
-.Sp
+.sp
 Mono typically uses the hostname to create the files that are used to
 share state across multiple Mono processes.  This is done to support
 home directories that might be shared over the network.
@@ -1531,7 +1531,7 @@
 \fBMONO_THEME\fR
 The name of the theme to be used by Windows.Forms.   Available themes today
 include "clearlooks", "nice" and "win32".
-.Sp
+.sp
 The default is "win32".  
 .TP
 \fBMONO_TLS_SESSION_CACHE_TIMEOUT\fR
@@ -1539,7 +1539,7 @@
 avoid a new negotiation between the client and a server. Negotiation are very
 CPU intensive so an application-specific custom value may prove useful for 
 small embedded systems.
-.Sp
+.sp
 The default is 180 seconds.
 .TP
 \fBMONO_THREADS_PER_CPU\fR
@@ -1624,7 +1624,7 @@
 commonly ASP.NET applications).  Due to internal limitations Mono,
 Mono by default does not use typed allocations on multi-appDomain
 applications as they could leak memory when a domain is unloaded. 
-.Sp
+.sp
 Although this is a fine default, for applications that use more than
 on AppDomain heavily (for example, ASP.NET applications) it is worth
 trading off the small leaks for the increased performance
@@ -1663,10 +1663,10 @@
 when pressed.  Useful to find out where the program is executing at a
 given point.  This only displays the stack trace of a single thread. 
 .TP
-\fBinit-stacks\FR 
+\fBinit-stacks\fR 
 Instructs the runtime to initialize the stack with
 some known values (0x2a on x86-64) at the start of a method to assist
-in debuggin the JIT engine.
+in debugging the JIT engine.
 .TP
 \fBkeep-delegates\fR
 This option will leak delegate trampolines that are no longer
@@ -1813,17 +1813,17 @@
 They are defined in the file `mono.d'.
 .TP
 .B ves-init-begin, ves-init-end
-.Sp
+.sp
 Begin and end of runtime initialization.
 .TP
 .B method-compile-begin, method-compile-end
-.Sp
+.sp
 Begin and end of method compilation.
 The probe arguments are class name, method name and signature,
 and in case of method-compile-end success or failure of compilation.
 .TP
 .B gc-begin, gc-end
-.Sp
+.sp
 Begin and end of Garbage Collection.
 .TP
 To verify the availability of the probes, run:
@@ -1847,48 +1847,48 @@
 mint live.
 .TP
 .B ~/.mono/aot-cache
-.Sp
+.sp
 The directory for the ahead-of-time compiler demand creation
 assemblies are located. 
 .TP
 .B /etc/mono/config, ~/.mono/config
-.Sp
+.sp
 Mono runtime configuration file.  See the mono-config(5) manual page
 for more information.
 .TP
 .B ~/.config/.mono/certs, /usr/share/.mono/certs
-.Sp
+.sp
 Contains Mono certificate stores for users / machine. See the certmgr(1) 
 manual page for more information on managing certificate stores and
 the mozroots(1) page for information on how to import the Mozilla root
 certificates into the Mono certificate store. 
 .TP
 .B ~/.mono/assemblies/ASSEMBLY/ASSEMBLY.config
-.Sp
+.sp
 Files in this directory allow a user to customize the configuration
 for a given system assembly, the format is the one described in the
 mono-config(5) page. 
 .TP
 .B ~/.config/.mono/keypairs, /usr/share/.mono/keypairs
-.Sp
+.sp
 Contains Mono cryptographic keypairs for users / machine. They can be 
 accessed by using a CspParameters object with DSACryptoServiceProvider
 and RSACryptoServiceProvider classes.
 .TP
 .B ~/.config/.isolatedstorage, ~/.local/share/.isolatedstorage, /usr/share/.isolatedstorage
-.Sp
+.sp
 Contains Mono isolated storage for non-roaming users, roaming users and 
 local machine. Isolated storage can be accessed using the classes from 
 the System.IO.IsolatedStorage namespace.
 .TP
 .B <assembly>.config
-.Sp
+.sp
 Configuration information for individual assemblies is loaded by the
 runtime from side-by-side files with the .config files, see the
 http://www.mono-project.com/Config for more information.
 .TP
 .B Web.config, web.config
-.Sp
+.sp
 ASP.NET applications are configured through these files, the
 configuration is done on a per-directory basis.  For more information
 on this subject see the http://www.mono-project.com/Config_system.web
